-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\mealy_moore\Meanly_Moore.vhd
-- Created: 2016-09-07 21:17:00
-- 
-- Generated by MATLAB 9.0 and HDL Coder 3.8
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1
-- Target subsystem base rate: 1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Meanly_Moore
-- Source Path: mealy_moore/Meanly-Moore
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Meanly_Moore IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        moore_flag                        :   IN    std_logic;
        mealy_flag                        :   IN    std_logic;
        Out1                              :   OUT   std_logic;
        Out2                              :   OUT   std_logic;
        Out3                              :   OUT   std_logic;
        Out4                              :   OUT   std_logic;
        FrequencyGenerator                :   OUT   std_logic;
        FreqInput                         :   OUT   std_logic
        );
END Meanly_Moore;


ARCHITECTURE rtl OF Meanly_Moore IS

  -- Component Declarations
  COMPONENT moore_sf
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          get_going                       :   IN    std_logic;
          ready                           :   OUT   std_logic;
          enable                          :   OUT   std_logic;
          FrequencyGenerator              :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT mealy_sf
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          get_going                       :   IN    std_logic;
          ready                           :   OUT   std_logic;
          enable                          :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT KingOfTHeHill
    PORT( u                               :   IN    std_logic;
          y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT FightToTheEnd
    PORT( u                               :   IN    std_logic;
          y                               :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : moore_sf
    USE ENTITY work.moore_sf(rtl);

  FOR ALL : mealy_sf
    USE ENTITY work.mealy_sf(rtl);

  FOR ALL : KingOfTHeHill
    USE ENTITY work.KingOfTHeHill(rtl);

  FOR ALL : FightToTheEnd
    USE ENTITY work.FightToTheEnd(rtl);

  -- Signals
  SIGNAL ready                            : std_logic;
  SIGNAL counter_en                       : std_logic;
  SIGNAL moore_sf_out3                    : std_logic;
  SIGNAL ready_1                          : std_logic;
  SIGNAL counter_en_1                     : std_logic;
  SIGNAL y                                : std_logic;
  SIGNAL y_1                              : std_logic;
  SIGNAL HelloWorld_out1                  : std_logic;

BEGIN
  -- <S1>/moore_sf
  u_moore_sf : moore_sf
    PORT MAP( clk => clk,
              reset => reset,
              get_going => moore_flag,
              ready => ready,
              enable => counter_en,
              FrequencyGenerator => moore_sf_out3
              );

  -- <S1>/mealy_sf
  u_mealy_sf : mealy_sf
    PORT MAP( clk => clk,
              reset => reset,
              get_going => mealy_flag,
              ready => ready_1,
              enable => counter_en_1
              );

  -- <S1>/KingOfTHeHill
  u_KingOfTHeHill : KingOfTHeHill
    PORT MAP( u => mealy_flag,
              y => y
              );

  -- <S1>/FightToTheEnd
  u_FightToTheEnd : FightToTheEnd
    PORT MAP( u => y,
              y => y_1
              );

  -- <S1>/HelloWorld
  u_HelloWorld : FightToTheEnd
    PORT MAP( u => y_1,
              y => HelloWorld_out1
              );

  Out1 <= ready;

  Out2 <= counter_en;

  Out3 <= ready_1;

  Out4 <= counter_en_1;

  FrequencyGenerator <= moore_sf_out3;

  FreqInput <= HelloWorld_out1;

END rtl;

